// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved


// code guard
#if !defined(h5_py_data_icc)
#error this file contains implementation details for pyre::h5::py attributes
#else

template <class objectT>
void
pyre::h5::py::data(py::class_<objectT> & cls)
{
    cls.def_property_readonly_static(
        // the name
        "identifierType",
        // the implementation
        [](const py::object &) -> H5I_type_t {
            // i am a group
            return H5I_DATASET;
        },
        // the docstring
        "get my h5 identifier type");

    // my type
    cls.def_property_readonly(
        // the name
        "cell",
        // the implementation
        [](const objectT & self) -> H5T_class_t {
            // get my type class
            return self.getTypeClass();
        },
        // the docstring
        "get my type as an HDF5 enum");

    cls.def_property_readonly(
        // the name
        "type",
        // the implementation
        [](const objectT & self) -> DataType * {
            // get my type class
            auto cls = self.getTypeClass();
            // deduce
            switch (cls) {
                // integers
                case H5T_INTEGER:
                    // return the integer data type descriptor
                    return new H5::IntType(self.getIntType());
                // floats
                case H5T_FLOAT:
                    // return the float data type descriptor
                    return new H5::FloatType(self.getFloatType());
                // strings
                case H5T_STRING:
                    // return the string data type descriptor
                    return new H5::StrType(self.getStrType());
                // compound types
                case H5T_COMPOUND:
                    // return the compound data type descriptor
                    return new H5::CompType(self.getCompType());
                // enum types
                case H5T_ENUM:
                    // return the enum data type descriptor
                    return new H5::EnumType(self.getEnumType());
                // variable length types
                case H5T_VLEN:
                    // return the variable length data type descriptor
                    return new H5::VarLenType(self.getVarLenType());
                // array types
                case H5T_ARRAY:
                    // return the array data type descriptor
                    return new H5::ArrayType(self.getArrayType());
                // by default
                default:
                    // grab whatever generic information is available
                    return new H5::DataType(self.getDataType());
            }
            // this should be unreachable, but just in case new paths open up
            return new H5::DataType(self.getDataType());
        },
        // the docstring
        "get detailed information about my type");

    // my on-disk size
    cls.def_property_readonly(
        // the name
        "disksize",
        // the implementation
        [](const objectT & self) {
            // easy enough
            return self.getStorageSize();
        },
        // the docstring
        "get my on-disk size");

    // the in-memory size
    cls.def_property_readonly(
        // the name
        "memsize",
        // the implementation
        [](const objectT & self) {
            // easy enough
            return self.getInMemDataSize();
        },
        // the docstring
        "get my in-memory size");

    // my shape
    cls.def_property_readonly(
        // the name
        "shape",
        // the implementation
        [](const objectT & self) -> shape_t {
            // get my dataspace
            auto space = self.getSpace();
            // ask it for its rank
            auto rank = space.getSimpleExtentNdims();
            // make a correctly sized vector to hold the result
            shape_t shape(rank);
            // populate it
            space.getSimpleExtentDims(&shape[0], nullptr);
            // and return it
            return shape;
        },
        // the docstring
        "get my shape");

    // my space
    cls.def_property_readonly(
        // the name
        "space",
        // the implementation
        [](const objectT & self) { return self.getSpace(); },
        // the docstring
        "get my dataspace");


    // all done
    return;
}

#endif

// end of file