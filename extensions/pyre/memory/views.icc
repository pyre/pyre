// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#pragma once

// declarations
#include "views.h"
// common properties
#include "properties.h"
// accessors
#include "accessors.h"
// mutators
#include "mutators.h"
// interface
#include "interface.h"
// buffer protocol
#include "buffer_protocol.h"


// the type registrar
template <class... viewT>
auto
pyre::py::memory::views::expand(py::module & memory, pyre::typelists::types_t<viewT...> &&) -> void
{
    // register the view types
    (view<viewT>(memory), ...);
    // all done
    return;
}

// the view class record builder
template <class viewT>
auto
pyre::py::memory::views::view(py::module & memory) -> void
{
    // alias the view type
    using view_t = viewT;

    // build the name of the class
    auto clsName = view_t::className();
    // the docstring
    auto clsDocstring = docstring<view_t>();

    // assemble the class record
    auto view = pyview_t<view_t>(
        // scope
        memory,
        // name
        clsName.data(),
        // add support for the buffer protocol
        py::buffer_protocol(),
        // docstring
        clsDocstring.data());

    // constructors
    constructors(view);
    // properties
    properties(view);
    // accessors
    accessors(view);
    // mutable views
    if constexpr (!view_t::readonly()) {
        // get mutators
        mutators(view);
        // and the interface
        interface(view);
    }
    // buffer protocol support
    bufferProtocol(view);

    // all done
    return;
}

// constructors
template <class viewT>
auto
pyre::py::memory::views::constructors(pyview_t<viewT> & cls) -> void
{
    // NYI
    // all done
    return;
}


// the docstring builder
template <class viewT>
auto
pyre::py::memory::views::docstring() -> string_t
{
    // alias the view
    using view_t = viewT;
    // build the docstring
    auto docstring =
        // access rights
        string_t(view_t::readonly() ? "const" : "mutable")
        // flavor
        + " view of a buffer of "
        // cell type
        + view_t::declValue();
    // all done
    return docstring;
}


// end of file
