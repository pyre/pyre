// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_py_memory_maps_icc)
#error this file contains implementation details for pyre::py::memory maps
#else


// const maps
template <class cellT>
void
pyre::py::memory::constmap(py::module & m, classname_t name, docstring_t docstring)
{
    // type alias
    using map_t = pyre::memory::constmap_t<cellT>;

    // build the class record
    auto cls = shared_holder_t<map_t>(m, name, docstring);

    // constructor
    cls.def(
        // the constructor
        py::init([](typename map_t::uri_type uri) {
            // get {os.fspath}
            auto fspath = py::module::import("os").attr("fspath");
            // call it to convert {uri}into a string
            auto filename = py::str(fspath(uri));
            // make a map and return it
            return new map_t(filename);
        }),
        // the docstring
        "create a read-only memory map backed by an existing file",
        // the signature
        "uri"_a);

    // read-only access
    bindConstStorage<map_t>(cls);

    // all done
    return;
}


// maps
template <class cellT>
void
pyre::py::memory::map(py::module & m, classname_t name, docstring_t docstring)
{
    // type alias
    using map_t = pyre::memory::map_t<cellT>;

    // build the class record
    auto cls = shared_holder_t<map_t>(m, name, docstring);

    // constructors
    cls.def(
        // the constructor
        py::init<typename map_t::uri_type, bool>(),
        // the docstring
        "create a memory map backed by an existing file",
        // the signature
        "uri"_a, "writable"_a = true);

    cls.def(
        // the constructor
        py::init<typename map_t::uri_type, typename map_t::size_type>(),
        // the docstring
        "create a new memory map with the given number of {cells}",
        // the signature
        "uri"_a, "cells"_a);

    // read-only access
    bindConstStorage<map_t>(cls);
    // read/write access
    bindStorage<map_t>(cls);

    // all done
    return;
}


#endif

// end of file
