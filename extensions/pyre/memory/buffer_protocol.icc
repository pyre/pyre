// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#pragma once


// declarations
#include "buffer_protocol.h"


// add support for the python buffer protocol
template <class T>
void
pyre::py::memory::bufferProtocol(pymem_t<T> & cls)
{
    // alias the storage strategy
    using mem_t = T;

    // the magic factory
    cls.def_buffer(
        // the handler
        [](mem_t & mem) -> py::buffer_info {
            // build a buffer info object and return it
            return py::buffer_info(
                // the pointer to the raw data
                const_cast<typename mem_t::value_type *>(mem.data()),
                // the size of the cell
                sizeof(typename mem_t::value_type),
                // the format descriptor
                py::format_descriptor<typename mem_t::value_type>::format(),
                // the number of dimensions: memory buffers are flat
                1,
                // the shape
                { mem.cells() },
                // the strides
                { sizeof(typename mem_t::value_type) },
                // access control
                mem.readonly());
        });

    // all done
    return;
}


// end of file
