# -*- coding: utf-8 -*-
#
# michael a.g. aïvázis <michael.aivazis@para-sim.com>
# (c) 1998-2023 all rights reserved


# externals
import datetime

# support
import merlin


# the base makefile generator
class Generator(merlin.component):
    """
    The base makefile content generator
    """

    # configurable state
    renderer = merlin.weaver.language()
    renderer.default = "make"
    renderer.doc = "the makefile mill"

    makefile = merlin.properties.path()
    makefile.default = "merlin.generic"
    makefile.doc = "the generated makefile"

    marker = merlin.properties.str()
    marker.default = "generic makefile fragment"
    marker.doc = "the comment marker that identifies this fragment"

    # interface
    def generate(self, stage, **kwds):
        """
        Generate the makefile preamble
        """
        # get the renderer
        renderer = self.renderer
        # open the output
        with open(stage / self.makefile, mode="w") as makefile:
            # prime the content generation
            contents = self._generate(stage=stage, **kwds)
            # ask my renderer to build the makefile
            document = renderer.render(document=contents)
            # and write it out
            print("\n".join(document), file=makefile)
        # all done
        return

    # implementation details
    def _generate(self, **kwds):
        """
        Build my contents
        """
        # make a time stamp
        stamp = (
            f"generated by '{self.pyre_name}' on {datetime.datetime.now().isoformat()}"
        )
        # mark
        yield self.renderer.commentLine(stamp)
        # all done
        return


# end of file
