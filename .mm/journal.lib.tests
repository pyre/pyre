# -*- Makefile -*-
#
# michael a.g. aïvázis <michael.aivazis@para-sim.com>
# (c) 1998-2023 all rights reserved


# the libjournal test suite
journal.lib.tests.stem := journal.lib
journal.lib.tests.prerequisites := journal.lib
journal.lib.tests.extern := journal.lib

# global testsuite settings; these apply to all test cases
# the harness is the portion of the command line before the test driver itselrf
journal.lib.tests.harness :=
# arguments to pass to each test case
journal.lib.tests.argv :=
# c++ compiler arguments
journal.lib.tests.c++.defines := PYRE_CORE
journal.lib.tests.c++.flags += -Wall $($(compiler.c++).std.c++17)
# c compiler arguments
journal.lib.tests.c.defines := PYRE_CORE
journal.lib.tests.c.flags += -Wall $($(compiler.c).std.c11)


# test case configuration
# the {ansi_emulates} driver has some special cases
tests.journal.lib.ansi_emulates.cases := ansi_emulates.yes ansi_emulates.no
# run with a value for TERM that indicates a terminal that does not support ANSI emulation
ansi_emulates.no.harness := TERM=foo
# tell the driver that it should expect an incompatible terminal
ansi_emulates.no.argv := 0
# run with a value for TERM that indicates a terminal that supports ANSI emulation
ansi_emulates.yes.harness := TERM=xterm
# tell the driver that it should expect a compatible terminal
ansi_emulates.yes.argv := 1


# the {chronicler_decor} has special cases
tests.journal.lib.chronicler_decor.cases := chronicler_decor.3 chronicler_decor.5
# set the decor to 3
chronicler_decor.3.argv := 3
chronicler_decor.3.harness := JOURNAL_DECOR=3
# set the decor to 5
chronicler_decor.5.argv := 5
chronicler_decor.5.harness := JOURNAL_DECOR=5

# the {chronicler_detail} has special cases
tests.journal.lib.chronicler_detail.cases := chronicler_detail.3 chronicler_detail.5
# set the detail to 3
chronicler_detail.3.argv := 3
chronicler_detail.3.harness := JOURNAL_DETAIL=3
# set the detail to 5
chronicler_detail.5.argv := 5
chronicler_detail.5.harness := JOURNAL_DETAIL=5

# the {chronicler_init} test case needs command line arguments
tests.journal.lib.chronicler_init.cases := chronicler_init.cmdline chronicler_init.envvar
# set detail and channels through the command line
chronicler_init.cmdline.argv := --journal.detail=5 --journal.debug=test.init.one,test.init.two
# set detail and channels through the environment
chronicler_init.envvar.harness := JOURNAL_DETAIL=5 JOURNAL_DEBUG=test.init.one,test.init.two

# the {file_sanity} test case must clean up the file it creates
tests.journal.lib.file_sanity.clean += file_sanity.out

# the {file_example} test case must clean up the file it creates
tests.journal.lib.file_example.clean += file_example.out

# the tests that send channel output to a log file must clean up
tests.journal.lib.api_file.clean += api_file.log
tests.journal.lib.debug_file.clean += debug_file.log
tests.journal.lib.firewall_file.clean += firewall_file.log
tests.journal.lib.error_file.clean += error_file.log
tests.journal.lib.info_file.clean += info_file.log
tests.journal.lib.warning_file.clean += warning_file.log
tests.journal.lib.help_file.clean += help_file.log

tests.journal.lib.api_file_mode.clean += api_file_mode.log
tests.journal.lib.debug_file_mode.clean += debug_file_mode.log
tests.journal.lib.firewall_file_mode.clean += firewall_file_mode.log
tests.journal.lib.error_file_mode.clean += error_file_mode.log
tests.journal.lib.info_file_mode.clean += info_file_mode.log
tests.journal.lib.warning_file_mode.clean += warning_file_mode.log
tests.journal.lib.help_file_mode.clean += help_file_mode.log

# end of file
