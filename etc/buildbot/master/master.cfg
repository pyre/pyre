# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave("beryllium", "pyre@beryllium"),
    BuildSlave("pelio", "pyre@pelio"),
    ]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# from buildbot.changes.gitpoller import GitPoller
# c['change_source'] = []
# c['change_source'].append(GitPoller(
        # 'git://github.com/buildbot/pyflakes.git',
        # workdir='gitpoller-workdir', branch='master',
        # pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build
c['schedulers'] = []

# add the force scheduler
from buildbot.schedulers.forcesched import ForceScheduler
force = ForceScheduler(name="force", builderNames=['beryllium', 'pelio'])
c['schedulers'].append(force)

# add the nightly scheduler
from buildbot.schedulers import timed
nightly_devel = timed.Nightly(
    name='nightly_devel', branch=None, builderNames=['beryllium', 'pelio'], hour=1)
c['schedulers'].append(nightly_devel)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.bzr import Bzr
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig

# initialize the builders
c['builders'] = []

# the builder of the 'devel' branch with mm on ubuntu
ubuntu12 = BuildFactory()
ubuntu12.addStep(
    Bzr(repourl='http://pyre.orthologue.com/repository/1.0/devel', mode='incremental'))
ubuntu12.addStep(
    ShellCommand(command=["/usr/bin/python3", "/opt/config/make/mm.py"]))
c['builders'].append(
    BuilderConfig(name="pelio", slavenames=["pelio"], factory=ubuntu))

# the builder of the 'devel' branch with mm on darwin11
darwin = BuildFactory()
darwin.addStep(
    Bzr(repourl='http://pyre.orthologue.com/repository/1.0/devel', mode='incremental'))
darwin.addStep(
    ShellCommand(command=["/opt/local/bin/python3", "/opt/config/make/mm.py"]))
c['builders'].append(
    BuilderConfig(name="beryllium", slavenames=['beryllium', ], factory=darwin))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyre","pyre")]),
    gracefulShutdown = False,
    forceBuild = 'auth',
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
    )

c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status.mail import MailNotifier
mn_cfg=MailNotifier(
    fromaddr="pyre@pyre.orthologue.com",
    sendToInterestedUsers=False,
    extraRecipients=['pyre@orthologue.com'],
    mode="failing",
    relayhost='localhost'
    )
c['status'].append(mn_cfg)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "pyre"
c['titleURL'] = "http://pyre.orthologue.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://pyre.orthologue.com:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
