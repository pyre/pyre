#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# michael a.g. aïvázis
# orthologue
# (c) 1998-2023 all rights reserved
#


# externals
import os
import operator
import functools
# access the framework
import pyre


# the application class
class cxxcls(pyre.application):
    """
    A generator of C++ classes
    """


    # user configurable state
    name = pyre.properties.str(default="Class")
    name.doc = "the name of the class"

    category = pyre.properties.str(default='namespace')
    category.doc = "the namespace in which to place the class"

    language = pyre.properties.str(default='c++')
    language.doc = "the target language"
    language.validators = language.constraints.isMember('c++', 'python')

    # public data
    @property
    def template(self):
        """
        Return the location of the class template directory
        """
        # externals
        import os
        # build and return the absolute path to the {class} template
        return os.path.join(pyre.prefix, 'templates', 'class.{.language}'.format(self))


    # application obligations
    @pyre.export
    def main(self, *args, **kwds):
        # get the nameserver
        nameserver = self.pyre_nameserver
        # make a local filesystem rooted at the class template directory
        template = self.vfs.local(root=self.template).discover()

        # build the work load
        targets = tuple(
            (nameserver.interpolate(expression=entry), node)
            for entry, node in template.contents.items() )

        # check whether any of the target files exist already
        for filename,_ in targets:
            # if the file exists already
            if os.path.exists(filename):
                # complain
                self.error.log("{!r} exists already".format(filename))
                # report failure
                return 1

        # make a local filesystem rooted at the current directory
        cwd = self.vfs.local(root='.')
        # go through all the files
        for filename, node in targets:
            # show me
            self.info.log('generating {!r}'.format(filename))
            # open the file
            with node.open() as raw:
                # pull the contents
                body = raw.read()
                # expand any macros
                body = nameserver.interpolate(expression=body)
                # create the file
                cwd.write(parent=cwd, name=filename, contents=body)

        # return success
        return 0


# main
if __name__ == '__main__':
    # instantiate
    app = cxxcls(name='class')
    # and invoke
    status = app.run()

    # return the exit code to the shell
    import sys
    sys.exit(status)


# end of file
