// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_journal_Inventory_icc)
#error this file contains implementation details for pyre::journal::Inventory
#else


// metamethods
pyre::journal::Inventory::Inventory(active_type active, fatal_type fatal) :
    _active { active },
    _fatal { fatal },
    _device { nullptr }
{}


// accessors
auto
pyre::journal::Inventory::active() const -> active_type
{
    // easy enough
    return _active;
}


auto
pyre::journal::Inventory::fatal() const -> fatal_type
{
    // easy enough
    return _fatal;
}


auto
pyre::journal::Inventory::device() const -> device_type
{
    // easy enough
    return _device;
}


// mutators
auto
pyre::journal::Inventory::active(active_type active) -> inventory_reference
{
    // easy enough
    _active = active;
    // all done
    return *this;
}


auto
pyre::journal::Inventory::fatal(fatal_type fatal) -> inventory_reference
{
    // easy enough
    _fatal = fatal;
    // all done
    return *this;
}


auto
pyre::journal::Inventory::device(device_type device) -> inventory_reference
{
    // easy enough
    _device = device;
    // all done
    return *this;
}


template <class deviceT, class... Args>
inline auto
pyre::journal::Inventory::device(Args &&... args) -> inventory_reference
{
    // make a shared pointer and install it
    _device = std::make_shared<deviceT>(std::forward<Args>(args)...);
    // all done
    return *this;
}


// syntactic sugar
pyre::journal::Inventory::operator active_type() const
{
    // return my activation state
    return active();
}


#endif

// end of file
