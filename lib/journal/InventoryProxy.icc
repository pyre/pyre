// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_journal_InventoryProxy_icc)
#error this file contains implementation details for pyre::journal::InventoryProxy
#else


// metamethods
template <typename clientT>
pyre::journal::InventoryProxy<clientT>::
InventoryProxy(inventory_reference inventory) :
    _inventory(inventory)
{}


// accessors
template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
active() const -> active_type
{
    // ask my referent
    return _inventory.active();
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
fatal() const -> fatal_type
{
    // ask my referent
    return _inventory.fatal();
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
device() const -> device_type
{
    // first, look in my inventory for a local setting
    auto device = _inventory.device();
    // if it's set
    if (device) {
        // that's the one
        return device;
    }

    // next, check whether there is a severity wide default registered with the client's index
    device = client_type::index().device();
    // if it's set
    if (device) {
        // that's the one
        return device;
    }

    // next, look for the global default
    device = Chronicler::device();
    // if it's set
    if (device) {
        // that's the one
        return device;
    }

    // if all else fails, make a trash can
    device = std::make_shared<Trash>();
    // and return it
    return device;
}


// mutators
template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
active(active_type active) -> client_reference
{
    // delegate
    _inventory.active(active);
    // enable chaining
    return static_cast<client_reference>(*this);
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
fatal(fatal_type fatal) -> client_reference
{
    // delegate
    _inventory.fatal(fatal);
    // enable chaining
    return static_cast<client_reference>(*this);
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
device(device_type device) -> client_reference
{
    // delegate
    _inventory.device(device);
    // enable chaining
    return static_cast<client_reference>(*this);
}


template <typename clientT>
template <class deviceT, class... Args>
auto
pyre::journal::InventoryProxy<clientT>::
device(Args&&... args) -> client_reference
{
    // delegate
    _inventory.device<deviceT>(std::forward<Args>(args)...);
    // enable chaining
    return static_cast<client_reference>(*this);
}


// interface
template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
activate() -> client_reference
{
    // set my activation
    active(true);
    // enable chaining
    return static_cast<client_reference>(*this);
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
deactivate() -> client_reference
{
    // set my activation
    active(false);
    // enable chaining
    return static_cast<client_reference>(*this);
}


// syntactic sugar
template <typename clientT>
pyre::journal::InventoryProxy<clientT>::
operator active_type() const
{
    // return my activation state
    return active();
}


#endif

// end of file
