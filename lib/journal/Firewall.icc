// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_journal_Firewall_icc)
#error this file contains implementation details for pyre::journal::Firewall
#else


// metamethods
template <template <typename> typename proxyT>
pyre::journal::Firewall<proxyT>::
Firewall(const name_type & name, detail_type detail) :
    channel_type(name, detail)
{
    // get my entry
    entry_type & e = this->entry();
    // decorate with my severity
    e.note("severity", "firewall");
}


// implementation details
// record the message to the chosen device
template <template <typename> typename proxyT>
void
pyre::journal::Firewall<proxyT>::
record()
{
    // hunt down the device to use
    auto dev = this->device();
    // and record the entry
    dev->memo(this->entry());
    // all done
    return;
}


// raise an exception when fatal
template <template <typename> typename proxyT>
void
pyre::journal::Firewall<proxyT>::
die()
{
    // prepare a message
    auto msg = this->name() + exception_type::headline_type(": FIREWALL BREACHED!");
    // throw a firewall
    throw exception_type(msg, this->entry().page(), this->entry().notes());
}


// initialize the channel index
template <template <typename> typename proxyT>
auto
pyre::journal::Firewall<proxyT>::
initializeIndex() -> index_type
{
    // make an empty index and return it; for {firewall}, channels are (active,fatal) by default
    return index_type(true, true);
}


#endif

// end of file
