// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_journal_exceptions_icc)
#error This header contains implementation details of pyre::journal::exceptions
#else


// application_error
// constructor
pyre::journal::application_error::
application_error(const headline_type & what, const page_type & page, const notes_type & notes) :
    std::runtime_error(what),
    _page{ page },
    _notes{ notes }
{}

// accessors
auto
pyre::journal::application_error::
page() const -> page_const_reference
{
    // easy enough
    return _page;
}

auto
pyre::journal::application_error::
notes() const -> notes_const_reference
{
    // easy enough
    return _notes;
}


// firewall_error
// constructor
pyre::journal::firewall_error::
firewall_error(const headline_type & what, const page_type & page, const notes_type & notes) :
    std::logic_error(what),
    _page{ page },
    _notes{ notes }
{}

// accessors
auto
pyre::journal::firewall_error::
page() const -> page_const_reference
{
    // easy enough
    return _page;
}

auto
pyre::journal::firewall_error::
notes() const -> notes_const_reference
{
    // easy enough
    return _notes;
}


// debug
// constructor
pyre::journal::debug_error::
debug_error(const headline_type & what, const page_type & page, const notes_type & notes) :
    std::logic_error(what),
    _page{ page },
    _notes{ notes }
{}

// accessors
auto
pyre::journal::debug_error::
page() const -> page_const_reference
{
    // easy enough
    return _page;
}

auto
pyre::journal::debug_error::
notes() const -> notes_const_reference
{
    // easy enough
    return _notes;
}


# endif

// end of file
