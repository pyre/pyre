// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_journal_Chronicler_icc)
#error this file contains implementation details for pyre::journal::Chronicler
#else


// accessors
auto
pyre::journal::Chronicler::decor() -> detail_type
{
    // easy enough
    return _decor;
}


auto
pyre::journal::Chronicler::decor(detail_type decor) -> detail_type
{
    // swap
    std::swap(decor, _decor);
    // and return the old value
    return decor;
}


auto
pyre::journal::Chronicler::detail() -> detail_type
{
    // easy enough
    return _detail;
}


auto
pyre::journal::Chronicler::detail(detail_type detail) -> detail_type
{
    // swap
    std::swap(detail, _detail);
    // and return the old value
    return detail;
}


auto
pyre::journal::Chronicler::margin() -> margin_type
{
    // easy enough
    return _margin;
}


auto
pyre::journal::Chronicler::margin(margin_type margin) -> margin_type
{
    // swap
    std::swap(margin, _margin);
    // and return the old value
    return margin;
}


auto
pyre::journal::Chronicler::notes() -> notes_type &
{
    // grant access to my global metadata
    return _notes;
}


auto
pyre::journal::Chronicler::device() -> device_type
{
    // share my device
    return _device;
}


// mutators
void
pyre::journal::Chronicler::device(device_type dev)
{
    // install the user's smart pointer
    _device = dev;
    // all done
    return;
}


template <class deviceT, class... Args>
void
pyre::journal::Chronicler::device(Args &&... args)
{
    // build a smart pointer to a device and install it
    _device = std::make_shared<deviceT>(std::forward<Args>(args)...);
    // all done
    return;
}


// string -> nameset converter
auto
pyre::journal::Chronicler::nameset(string_t text) -> nameset_type
{
    // make a set
    nameset_type channels;
    // start at the beginning
    name_type::size_type start { 0 };
    // until much later
    while (1) {
        // look for a comma
        auto pos = text.find(",", start);
        // if not found
        if (pos == string_t::npos) {
            // there was no comma; grab what left of the string
            auto channel = text.substr(start, string_t::npos);
            // if it's not empty
            if (!channel.empty()) {
                // add it to the set
                channels.emplace(channel);
            }
            // and we are done
            break;
        }
        // if found, extract the substring
        auto channel = text.substr(start, pos - start);
        // if it's not empty
        if (!channel.empty()) {
            // add it to the set
            channels.emplace(channel);
        }
        // update the start position and move on
        start = pos + 1;
    }

    // all done
    return channels;
}


#endif

// end of file
