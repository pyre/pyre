// -*- C++ -*-
//
// bianca giovanardi
// (c) 1998-2025 all rights reserved
//


// code guard
#if !defined(pyre_tensor_UnitQuaternion_icc)
#error this file contains implementation details for pyre::tensor::UnitQuaternion
#else


template <typename T>
constexpr pyre::tensor::UnitQuaternion<T>::UnitQuaternion(real_type (&&args)[4]) :
    _qr(args[0]),
    _qi(args[1]),
    _qj(args[2]),
    _qk(args[3]),
    _matrix({ complex_type(_qr, _qi), complex_type(_qj, _qk), -std::conj(complex_type(_qj, _qk)),
              std::conj(complex_type(_qr, _qi)) })
{}

template <typename T>
constexpr pyre::tensor::UnitQuaternion<T>::UnitQuaternion(
    const matrix_representation_type & matrix) :
    _qr(std::real(matrix[0])),
    _qi(std::imag(matrix[0])),
    _qj(std::real(matrix[1])),
    _qk(std::imag(matrix[1])),
    _matrix(matrix)
{}

template <typename T>
constexpr pyre::tensor::UnitQuaternion<T>::UnitQuaternion(
    const real_type & theta, const rotation_axis_type & axis) :
    UnitQuaternion({ pyre::math::cos(0.5 * theta), axis[0] * pyre::math::sin(0.5 * theta),
                     axis[1] * pyre::math::sin(0.5 * theta),
                     axis[2] * pyre::math::sin(0.5 * theta) })
{}

// constructor from a rotation matrix representation
template <typename T>
constexpr pyre::tensor::UnitQuaternion<T>::UnitQuaternion(const rotation_matrix_type & matrix) :
    UnitQuaternion(
        pyre::math::acos(0.5 * (pyre::tensor::trace(matrix) - 1.0)),
        pyre::tensor::normalize(pyre::tensor::axis(pyre::tensor::skew(matrix))))
{}

// get the component {r} of this quaternion
template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::r() const -> real_type
{
    return _qr;
}

// get the component {i} of this quaternion
template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::i() const -> real_type
{
    return _qi;
}

// get the component {j} of this quaternion
template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::j() const -> real_type
{
    return _qj;
}

// get the component {k} of this quaternion
template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::k() const -> real_type
{
    return _qk;
}

template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::rotation() const -> rotation_matrix_type
{
    return rotation_matrix_type(
        { 1.0 - 2.0 * (_qj * _qj + _qk * _qk), 2.0 * (_qi * _qj - _qk * _qr),
          2.0 * (_qi * _qk + _qj * _qr), 2.0 * (_qi * _qj + _qk * _qr),
          1.0 - 2.0 * (_qi * _qi + _qk * _qk), 2.0 * (_qj * _qk - _qi * _qr),
          2.0 * (_qi * _qk - _qj * _qr), 2.0 * (_qj * _qk + _qi * _qr),
          1.0 - 2.0 * (_qi * _qi + _qj * _qj) });
}

template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::axis() const -> rotation_axis_type
{
    real_type norm = pyre::math::sqrt(_qi * _qi + _qj * _qj + _qk * _qk);
    return rotation_axis_type({ _qi / norm, _qj / norm, _qk / norm });
}

template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::angle() const -> real_type
{
    return 2.0 * pyre::math::atan2(pyre::math::sqrt(_qi * _qi + _qj * _qj + _qk * _qk), _qr);
}

template <typename T>
constexpr auto
pyre::tensor::UnitQuaternion<T>::operator*(const unit_quaternion_type & rhs) const
    -> unit_quaternion_type
{
    return unit_quaternion_type(_matrix * rhs._matrix);
}


#endif

// end of file
