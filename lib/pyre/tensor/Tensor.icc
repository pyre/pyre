// -*- C++ -*-
//
// bianca giovanardi
// (c) 1998-2024 all rights reserved
//


// code guard
#if !defined(pyre_tensor_Tensor_icc)
#error this file contains implementation details for pyre::tensor::Tensor
#else


template <typename T, class packingT, int... I>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor() : _data()
{
    // initialize memory
    reset();

    // all done
    return;
}

template <typename T, class packingT, int... I>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor(const data_t & data) : _data(data)
{}

template <typename T, class packingT, int... I>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor(data_t && data) noexcept :
    _data(std::forward(data))
{}

template <typename T, class packingT, int... I>
template <class... T2>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor(T2... args)
    requires(sizeof...(T2) == S)
    : Tensor()
{
    // initialize with input arguments
    _initialize(make_integer_sequence<S> {}, args...);

    // all done
    return;
}

template <typename T, class packingT, int... I>
template <class T2>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor(T2 (&&args)[S]) : Tensor()
{
    // initialize with input arguments
    _initialize(make_integer_sequence<S> {}, args);

    // all done
    return;
}

// copy constructor from a tensor with (potentially) different packing
template <typename T, class packingT, int... I>
template <pyre::tensor::tensor_c tensorT>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor(const tensorT & rhs)
    requires(std::is_same_v<typename sum<tensor_t, tensorT>::type, tensor_t>)
    : _data()
{
    // assign rhs to this
    *this = rhs;

    // all done
    return;
}

// move constructor from a tensor with exact same packing
template <typename T, class packingT, int... I>
template <pyre::tensor::tensor_c tensorT>
constexpr pyre::tensor::Tensor<T, packingT, I...>::Tensor(tensorT && other)
    requires(std::is_same_v<tensor_t, tensorT>)
    : _data(std::move(other._data))
{}

// copy assignment operator from a tensor with (potentially) different packing
template <typename T, class packingT, int... I>
template <pyre::tensor::tensor_c tensorT>
constexpr pyre::tensor::Tensor<T, packingT, I...> &
pyre::tensor::Tensor<T, packingT, I...>::operator=(const tensorT & rhs)
// TOFIX: define a concept of {compatible} tensors
    requires(std::is_same_v<typename pyre::tensor::sum<tensor_t, tensorT>::type, tensor_t>)
{
    // the type of tensor {lhs} (my type)
    using tensor1_t = tensor_t;
    // the type of tensor {rhs} (the type of the right-hand side)
    using tensor2_t = tensorT;

    // the number of components of the target tensor (lhs)
    constexpr int D = tensor1_t::size;

    // helper function to perform component-by-component assignment
    constexpr auto _component_wise_assignment = []<int... J>(
                                                    tensor1_t & lhs, const tensor2_t & rhs,
                                                    pyre::tensor::integer_sequence<J...>) -> void {
        // helper function to assign component at offset K (enumeration relative to the {lhs} packing)
        constexpr auto _component_assignment = []<int K>(
                                                   tensor1_t & lhs, const tensor2_t & rhs) -> void {
            // TOFIX: perhaps we should put this into a function
            // get the index corresponding to the offset K in the canonical packing
            constexpr auto index = tensor1_t::layout().index(K);
            // map the index into the offset for the packing of {rhs}
            constexpr auto K2 = tensor2_t::layout().offset(index);
            // assign the right-hand side to the left-hand side
            lhs[K] = rhs[K2];
            // all done
            return;
        };

        // do assignment for all components
        ((_component_assignment.template operator()<J>(lhs, rhs)), ...);

        // all done
        return;
    };

    // perform component-by-component assignment
    _component_wise_assignment(*this, rhs, pyre::tensor::make_integer_sequence<D> {});

    // all done
    return *this;
}

// move assignment operator from a tensor with exact same packing
template <typename T, class packingT, int... I>
template <pyre::tensor::tensor_c tensorT>
constexpr pyre::tensor::Tensor<T, packingT, I...> &
pyre::tensor::Tensor<T, packingT, I...>::operator=(tensorT && other)
    requires(std::is_same_v<tensor_t, tensorT>)
{
    // move the data
    _data = std::move(other._data);

    // all done
    return *this;
}

template <typename T, class packingT, int... I>
constexpr pyre::tensor::Tensor<T, packingT, I...>::~Tensor()
{}

template <typename T, class packingT, int... I>
constexpr const T &
pyre::tensor::Tensor<T, packingT, I...>::operator[](index_t i) const
{
    // get the offset that corresponds to this {index}
    auto offset = _layout[i];
    // get and return the value
    return _data.at(offset);
}

template <typename T, class packingT, int... I>
constexpr T &
pyre::tensor::Tensor<T, packingT, I...>::operator[](index_t i)
{
    // get the offset that corresponds to this {index}
    auto offset = _layout[i];
    // get and return the value
    return _data.at(offset);
}

template <typename T, class packingT, int... I>
constexpr const T &
pyre::tensor::Tensor<T, packingT, I...>::operator[](int i) const
{
    return _data.at(i);
}

template <typename T, class packingT, int... I>
constexpr T &
pyre::tensor::Tensor<T, packingT, I...>::operator[](int i)
{
    return _data.at(i);
}

template <typename T, class packingT, int... I>
constexpr pyre::tensor::Tensor<T, packingT, I...>::operator T() const
    requires(scalar_c<tensor_t>)
{
    return _data[0];
}

template <typename T, class packingT, int... I>
constexpr const auto
pyre::tensor::Tensor<T, packingT, I...>::begin() const
{
    return _data.cbegin();
}

template <typename T, class packingT, int... I>
constexpr const auto
pyre::tensor::Tensor<T, packingT, I...>::end() const
{
    return _data.cbegin() + S /* number of cells */;
}

template <typename T, class packingT, int... I>
constexpr auto
pyre::tensor::Tensor<T, packingT, I...>::begin()
{
    return _data.begin();
}

template <typename T, class packingT, int... I>
constexpr auto
pyre::tensor::Tensor<T, packingT, I...>::end()
{
    return _data.begin() + S /* number of cells */;
}

template <typename T, class packingT, int... I>
constexpr void
pyre::tensor::Tensor<T, packingT, I...>::reset()
{
    // reset to zero all entries
    return _reset(make_integer_sequence<S> {});
}

template <typename T, class packingT, int... I>
constexpr auto
pyre::tensor::Tensor<T, packingT, I...>::shape() const
{
    return vector_t<N, int> { I... };
}

template <typename T, class packingT, int... I>
constexpr bool
pyre::tensor::Tensor<T, packingT, I...>::is_symmetric() const
{
    return symmetric;
}

template <typename T, class packingT, int... I>
constexpr bool
pyre::tensor::Tensor<T, packingT, I...>::is_diagonal() const
{
    return diagonal;
}

template <typename T, class packingT, int... I>
constexpr bool
pyre::tensor::Tensor<T, packingT, I...>::is_square()
{
    // if all the entries {I1, ..., IN} in the parameter pack are equal then the tensor is square
    return entries_all_equal<I...>();
}

template <typename T, class packingT, int... I>
template <int... J, class... T2>
constexpr void
pyre::tensor::Tensor<T, packingT, I...>::_initialize(integer_sequence<J...>, T2... args)
{
    ((_data[J] = args), ...);

    // all done
    return;
}

template <typename T, class packingT, int... I>
template <int... J, class T2>
constexpr void
pyre::tensor::Tensor<T, packingT, I...>::_initialize(integer_sequence<J...>, T2 (&args)[S])
{
    ((_data[J] = args[J]), ...);

    // all done
    return;
}

template <typename T, class packingT, int... I>
template <int... J>
constexpr void
pyre::tensor::Tensor<T, packingT, I...>::_reset(integer_sequence<J...>)
{
    ((_data[J] = T()), ...);

    // all done
    return;
}


#endif

// end of file
