// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#pragma once

// factory
auto
pyre::viz::products::memory::I1::create(cell_type value) -> ref_type
{
    // build an instance and wrap it in a shared pointer
    return std::make_shared<I1>(sentinel_type(), value);
}

// constructor
pyre::viz::products::memory::I1::I1(sentinel_type sentinel, cell_type value) :
    // base class
    pyre::flow::product_t(sentinel),
    // member
    _value { value }
{}

// value access
auto
pyre::viz::products::memory::I1::read() -> cell_type
{
    // if i'm stale
    if (stale()) {
        // refresh me
        make();
    }
    // return my value
    return _value;
}

auto
pyre::viz::products::memory::I1::write(cell_type value) -> ref_type
{
    // record the new value
    _value = value;
    // invalidate me
    flush();
    // build a self reference
    auto self = std::dynamic_pointer_cast<I1>(ref());
    // and return it
    return self;
}

// end of file
