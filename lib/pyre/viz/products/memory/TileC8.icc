// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#pragma once

// factory
auto
pyre::viz::products::memory::TileC8::create(shape_type shape, cell_type value) -> ref_type
{
    // build an instance and wrap it in a shared pointer
    return std::make_shared<TileC8>(sentinel_type(), shape, value);
}

// constructor
pyre::viz::products::memory::TileC8::TileC8(
    sentinel_type sentinel, shape_type shape, cell_type value) :
    // base class; start out clean and initialized
    pyre::flow::product_t(sentinel, false),
    // members
    _shape { shape },
    _data { packing_type(shape), shape.cells() }
{
    // initialize
    std::fill(_data.begin(), _data.end(), value);
}

// accessors
auto
pyre::viz::products::memory::TileC8::shape() const -> shape_type
{
    // easy enough
    return _shape;
}

// value access by factories
auto
pyre::viz::products::memory::TileC8::read() -> const grid_type &
{
    // refresh me
    make();
    // return my value
    return _data;
}

auto
pyre::viz::products::memory::TileC8::write() -> grid_type &
{
    // grant access to my data
    return _data;
}

// end of file
