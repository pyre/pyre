// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once

// factory
template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::create(
    const name_type & name, interval_type interval) -> factory_ref_type
{
    // make an instance and wrap it in a shared pointer
    auto ref = std::make_shared<Cycle>(sentinel_type(), name, interval);
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.viz.factories.filters.cycle");
    // let me know
    channel
        // mark
        << "cycle '" << ref->name() << "' at " << ref.get() << ": create"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return ref;
}

// destructor
template <class signalT, class cycleT>
pyre::viz::factories::filters::Cycle<signalT, cycleT>::~Cycle()
{
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.viz.factories.filters.cycle");
    // let me know
    channel
        // mark
        << "cycle '" << name() << "' at " << this << ": destroy"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return;
}

// constructor
template <class signalT, class cycleT>
pyre::viz::factories::filters::Cycle<signalT, cycleT>::Cycle(
    sentinel_type sentinel, const name_type & name, interval_type interval) :
    // superclass
    base_type(sentinel, name),
    // members
    _interval(interval)
{}

// accessors
template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::interval() const -> interval_type
{
    // easy enough
    return _interval;
}

template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::signal() -> signal_ref_type
{
    // look up the product bound to my {signal} slot and return it
    return std::dynamic_pointer_cast<signal_type>(input("signal"));
}

template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::cycle() -> cycle_ref_type
{
    // look up the product bound to my {signal} slot and return it
    return std::dynamic_pointer_cast<cycle_type>(output("cycle"));
}

// mutators
template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::interval(interval_type interval)
    -> factory_ref_type
{
    // update the interval
    _interval = interval;
    // invalidate the downstream graph
    flush();
    // make a self reference
    auto self = std::dynamic_pointer_cast<Cycle>(ref());
    // and return it
    return self;
}

template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::signal(signal_ref_type signal)
    -> factory_ref_type
{
    // bind {signal} to my slot
    addInput("signal", std::static_pointer_cast<pyre::flow::product_t>(signal));
    // make a self reference
    auto self = std::dynamic_pointer_cast<Cycle>(ref());
    // and return it
    return self;
}

template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::cycle(cycle_ref_type cycle)
    -> factory_ref_type
{
    // bind {cycle} to my slot
    addOutput("cycle", std::static_pointer_cast<pyre::flow::product_t>(cycle));
    // make a self reference
    auto self = std::dynamic_pointer_cast<Cycle>(ref());
    // and return it
    return self;
}

// interface
template <class signalT, class cycleT>
auto
pyre::viz::factories::filters::Cycle<signalT, cycleT>::make(
    const name_type & slot, base_type::product_ref_type product) -> base_type::factory_ref_type
{
    // chain up
    auto self = base_type::make(slot, product);
    // get read access to the signal
    auto & signal = this->signal()->read();
    // get write access to the cycle data
    auto & cycle = this->cycle()->write();
    // get the number cells in the output tile
    auto cells = cycle.layout().cells();
    // make sure the input is compatible
    bool ok = cells == signal.layout().cells();
    // if not
    if (!ok) {
        // make a channel
        auto channel = pyre::journal::error_t("pyre.viz.factories.filters.cycle");
        // complain
        channel
            // who
            << "cycle " << this->name() << "' at " << this << ":"
            << pyre::journal::newline
            // what
            << "shape mismatch in the input and output slots"
            << pyre::journal::newline
            // inputs
            << "inputs "
            << pyre::journal::newline
            // indent
            << pyre::journal::indent
            // signal
            << "signal: " << signal.layout().cells()
            << pyre::journal::newline
            // outdent
            << pyre::journal::outdent
            // outputs
            << "outputs: "
            << pyre::journal::newline
            // indent
            << pyre::journal::indent
            // cycle
            << "cycle: " << cycle.layout().cells()
            << pyre::journal::newline
            // outdent
            << pyre::journal::outdent
            // flush
            << pyre::journal::endl(__HERE__);
        // and bail, just in case errors aren't fatal
        return self;
    }

    // unpack my interval
    auto [low, high] = _interval;
    // compute its length
    auto delta = high - low;
    // go over the cells
    for (auto cell = 0; cell < cells; ++cell) {
        // read the value from the signal
        auto value = signal[cell];
        // compute the phase and map it to [-0.5, 0.5]
        auto phase = std::arg(value) / (2 * M_PI);
        // fold the negative range
        if (phase < 0) {
            // by shifting it ove
            phase += 1;
        }
        // scale it and and store it
        cycle[cell] = low + phase * delta;
    }
    // all done
    return self;
}

// end of file