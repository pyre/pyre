// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#pragma once


// factory
auto
pyre::viz::factories::colormaps::Complex::create(
    const name_type & name,
    // number of bins
    int bins,
    // the color saturation
    double saturation,
    // brightness bin range
    double minBrightness, double maxBrightness,
    // amplitude bin range
    double minAmplitude, double maxAmplitude,
    // out of range data
    rgb_type underflow, rgb_type overflow) -> factory_ref_type
{
    // build an instance and wrap it in a shared pointer
    auto ref = std::make_shared<Complex>(
        sentinel_type(), name, bins, saturation, minBrightness, maxBrightness, minAmplitude,
        maxAmplitude, underflow, overflow);
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.viz.factories.colormaps.complex.create");
    // show me
    channel
        // the factory
        << "complex " << ref.get() << ": create"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);
    // return it
    return ref;
}

// constructor
pyre::viz::factories::colormaps::Complex::Complex(
    sentinel_type sentinel, const name_type & name, int bins, double saturation,
    double minBrightness, double maxBrightness, double minAmplitude, double maxAmplitude,
    rgb_type underflow, rgb_type overflow) :
    // superclass
    base_type(sentinel, name),
    // members
    _bins { bins },
    _saturation { saturation },
    _scaleHue { 2 * M_PI / _bins },
    _minBrightness { minBrightness },
    _maxBrightness { maxBrightness },
    _scaleBrightness { (_maxBrightness - _minBrightness) / _bins },
    _minAmplitude { minAmplitude },
    _maxAmplitude { maxAmplitude },
    _scaleAmplitude { (_maxAmplitude - _minAmplitude) / _bins },
    _overflow { overflow },
    _underflow { underflow }
{}

// end of file
