// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once


// factory
template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::create(
    const name_type & name,
    // number of bins
    int bins,
    // the color saturation
    double saturation,
    // brightness bin range
    double minBrightness, double maxBrightness,
    // amplitude bin range
    double minAmplitude, double maxAmplitude,
    // out of range data
    rgb_type underflow, rgb_type overflow) -> factory_ref_type
{
    // build an instance and wrap it in a shared pointer
    auto ref = std::make_shared<Complex>(
        sentinel_type(), name, bins, saturation, minBrightness, maxBrightness, minAmplitude,
        maxAmplitude, underflow, overflow);
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.viz.factories.colormaps.complex.create");
    // show me
    channel
        // the factory
        << "complex " << ref.get() << ": create"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);
    // return it
    return ref;
}

// constructor
template <class signalT, class redT, class greenT, class blueT>
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::Complex(
    sentinel_type sentinel, const name_type & name, int bins, double saturation,
    double minBrightness, double maxBrightness, double minAmplitude, double maxAmplitude,
    rgb_type underflow, rgb_type overflow) :
    // superclass
    base_type(sentinel, name),
    // members
    _bins { bins },
    _saturation { saturation },
    _scaleHue { 2 * M_PI / _bins },
    _minBrightness { minBrightness },
    _maxBrightness { maxBrightness },
    _scaleBrightness { (_maxBrightness - _minBrightness) / _bins },
    _minAmplitude { minAmplitude },
    _maxAmplitude { maxAmplitude },
    _scaleAmplitude { (_maxAmplitude - _minAmplitude) / _bins },
    _overflow { overflow },
    _underflow { underflow }
{}

// destructor
template <class signalT, class redT, class greenT, class blueT>
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::~Complex()
{}

// accessors
template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::signal() -> signal_ref_type
{
    // look up the product bound to my {signal} slot and return it
    return std::dynamic_pointer_cast<signal_type>(input("signal"));
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::red() -> red_ref_type
{
    // look up the product bound to my {red} slot and return it
    return std::dynamic_pointer_cast<red_type>(output("red"));
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::green() -> green_ref_type
{
    // look up the product bound to my {green} slot and return it
    return std::dynamic_pointer_cast<green_type>(output("green"));
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::blue() -> blue_ref_type
{
    // look up the product bound to my {blue} slot and return it
    return std::dynamic_pointer_cast<blue_type>(output("blue"));
}

// mutators
template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::signal(
    signal_ref_type signal) -> factory_ref_type
{
    // connect my {signal} slot
    addInput("signal", std::static_pointer_cast<pyre::flow::product_t>(signal));
    // make a self reference
    auto self = std::dynamic_pointer_cast<Complex>(ref());
    // and return it
    return self;
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::red(red_ref_type red)
    -> factory_ref_type
{
    // connect my {red} slot
    addOutput("red", std::static_pointer_cast<pyre::flow::product_t>(red));
    // make a self reference
    auto self = std::dynamic_pointer_cast<Complex>(ref());
    // and return it
    return self;
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::green(green_ref_type green)
    -> factory_ref_type
{
    // connect my {green} slot
    addOutput("green", std::static_pointer_cast<pyre::flow::product_t>(green));
    // make a self reference
    auto self = std::dynamic_pointer_cast<Complex>(ref());
    // and return it
    return self;
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::blue(blue_ref_type blue)
    -> factory_ref_type
{
    // connect my {blue} slot
    addOutput("blue", std::static_pointer_cast<pyre::flow::product_t>(blue));
    // make a self reference
    auto self = std::dynamic_pointer_cast<Complex>(ref());
    // and return it
    return self;
}

template <class signalT, class redT, class greenT, class blueT>
auto
pyre::viz::factories::colormaps::Complex<signalT, redT, greenT, blueT>::make(
    const name_type & slot, base_type::product_ref_type product) -> base_type::factory_ref_type
{
    // chain up
    auto self = base_type::make(slot, product);

    // get my data
    auto s = signal();
    // get my color channels
    auto r = red();
    auto g = green();
    auto b = blue();

    // the bound products must be shape compatible; the current implementation only requires
    // that products have the same number of cells
    auto pixels = s->shape().cells();
    // verify consistency
    bool ok =
        // check r
        pixels == r->shape().cells() &&
        // check g
        pixels == g->shape().cells() &&
        // check b
        pixels == b->shape().cells();
    // if something is off
    if (!ok) {
        // make a channel
        auto channel = pyre::journal::error_t("pyre.viz.factories.colormaps.complex");
        // complain
        channel
            // who
            << "complex factory at " << this << ":"
            << pyre::journal::newline
            // what
            << "shape mismatch in the input and output slots"
            << pyre::journal::newline
            // inputs
            << "inputs "
            << pyre::journal::newline
            // indent
            << pyre::journal::indent
            // signal
            << "signal: " << s->shape()
            << pyre::journal::newline
            // outdent
            << pyre::journal::outdent
            // outputs
            << "outputs: "
            << pyre::journal::newline
            // indent
            << pyre::journal::indent
            // details
            // red
            << "red: " << r->shape()
            << pyre::journal::newline
            // green
            << "green: " << g->shape()
            << pyre::journal::newline
            // blue
            << "blue: " << b->shape()
            << pyre::journal::newline
            // outdent
            << pyre::journal::outdent
            // flush
            << pyre::journal::endl(__HERE__);
        // and bail, just in case errors aren't fatal
        return self;
    }

    // get the data buffers
    // inputs
    auto sData = s->read();
    // outputs
    auto rData = r->write();
    auto gData = g->write();
    auto bData = b->write();

    // color convert
    for (auto pixel = 0; pixel < pixels; ++pixel) {
        // the pixel color
        rgb_type color;
        // read
        auto value = sData[pixel];

        // compute the amplitude
        auto amplitude = std::abs(value);
        // if the value underflows
        if (amplitude < _minAmplitude) {
            // use whatever color the user has specified
            color = _underflow;
        } else if (amplitude > _maxAmplitude) {
            // use whatever color the user has specified
            color = _overflow;
        } else {
            // get the phase from the data source
            auto phase = std::arg(value);
            // bin the phase
            int hueBin = phase / _scaleHue;
            // compute the hue
            auto hue = hueBin * _scaleHue;
            // bin the amplitude
            int brightnessBin = (amplitude - _minAmplitude) / _scaleAmplitude;
            // compute the brightness
            auto brightness = _minBrightness + brightnessBin * _scaleBrightness;
            // convert the {hsl} values to {rgb} and return the triplet
            color = pyre::viz::colorspaces::hsb(hue, _saturation, brightness);
        }
        // unpack
        auto [rValue, gValue, bValue] = color;
        // and write
        rData[pixel] = rValue;
        gData[pixel] = gValue;
        bData[pixel] = bValue;
    }

    // mark all products as clean
    r->clean();
    g->clean();
    b->clean();

    // all done
    return self;
}

// end of file
