// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#pragma once

// factory
auto
pyre::viz::factories::arithmetic::AddI1::create() -> factory_ref_type
{
    // build an instance and wrap it in a shared pointer
    auto ref = std::make_shared<AddI1>(sentinel_type());
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.viz.factories.arithmetic.add_i1.create");
    // show me
    channel
        // the factory
        << "add_i1 " << ref.get() << ": create"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);
    // and return the ref
    return ref;
}

// constructor
pyre::viz::factories::arithmetic::AddI1::AddI1(sentinel_type sentinel) :
    // superclass
    base_type(sentinel)
{}

// end of file