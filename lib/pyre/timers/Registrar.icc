// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(pyre_timers_Registrar_icc)
#error this file contains implementation details for pyre::timers::Registrar
#else


// metamethods
template <class movementT>
pyre::timers::Registrar<movementT>::
Registrar():
    _registry {}
{}


// interface
template <class movementT>
auto
pyre::timers::Registrar<movementT>::
size() const
{
    return _registry.size();
}


template <class movementT>
auto
pyre::timers::Registrar<movementT>::
empty() const
{
    return _registry.empty();
}


template <class movementT>
auto
pyre::timers::Registrar<movementT>::
contains(const name_type & timer) const
{
    // attempt to locate the {timer}
    auto place = _registry.find(timer);
    // if i can't find it
    if (place == _registry.end()) {
        // i don't have it
        return false;
    }
    // otherwise, i do
    return true;
}


template <class movementT>
auto
pyre::timers::Registrar<movementT>::
emplace(const name_type & name)
{
    // easy enough
    return _registry.emplace(name, movement_type());
}


template <class movementT>
auto
pyre::timers::Registrar<movementT>::
begin() const
{
    return _registry.begin();
}


template <class movementT>
auto
pyre::timers::Registrar<movementT>::
end() const
{
    return _registry.end();
}


template <class movementT>
auto
pyre::timers::Registrar<movementT>::
lookup(const name_type & timer) -> movement_type &
{
    // look it up and return it
    return _registry[timer];
}


#endif

// end of file
