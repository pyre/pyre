// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once

// factory
template <class op1T, class op2T, class resultT>
auto
pyre::flow::factories::Add<pyre::flow::products::var_t, op1T, op2T, resultT>::create(
    const name_type & name) -> factory_ref_type
{
    // make an instance and wrap it in a shared pointer
    auto ref = std::make_shared<Add>(sentinel_type(), name);
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.flow.factories.add");
    // let me know
    channel
        // mark
        << "var add '" << ref->name() << "' at " << ref.get() << ": create"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return ref;
}

// destructor
template <class op1T, class op2T, class resultT>
pyre::flow::factories::Add<pyre::flow::products::var_t, op1T, op2T, resultT>::~Add()
{
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.flow.factories.add");
    // let me know
    channel
        // mark
        << "var add '" << this->name() << "' at " << this << ": destroy"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return;
}

// constructor
template <class op1T, class op2T, class resultT>
pyre::flow::factories::Add<pyre::flow::products::var_t, op1T, op2T, resultT>::Add(
    sentinel_type sentinel, const name_type & name) :
    // base class
    base_type(sentinel, name)
{}

template <class op1T, class op2T, class resultT>
auto
pyre::flow::factories::Add<pyre::flow::products::var_t, op1T, op2T, resultT>::make(
    const name_type & slot, typename base_type::product_ref_type product) ->
    typename base_type::factory_ref_type
{
    // chain up
    auto self = base_type::make(slot, product);
    // get read access to the input data
    auto op1 = this->op1()->read();
    auto op2 = this->op2()->read();
    // compute
    auto value = op1 + op2;
    // store
    this->result()->write(value);
    // all done
    return self;
}

// end of file
