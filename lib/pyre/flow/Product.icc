// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#pragma once

// factory
auto
pyre::flow::Product::create(bool stale) -> product_ref_type
{
    // build an instance and wrap it in a shared pointer
    auto ref = std::make_shared<Product>(sentinel_type(), stale);
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.flow.products.create");
    // show me
    channel
        // the product
        << "product " << ref.get() << ": create"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);
    // hand off the ref
    return ref;
}

// constructors
pyre::flow::Product::Product(sentinel_type sentinel, bool stale) :
    // superclass
    Node(sentinel),
    // data members
    _stale { stale },
    _readers {},
    _writers {}
{}

// build a reference
auto
pyre::flow::Product::ref() -> product_ref_type
{
    // build an instance and wrap it in a shared pointer
    return std::dynamic_pointer_cast<Product>(shared_from_this());
}

// accessors
auto
pyre::flow::Product::stale() const -> bool
{
    // easy enough
    return _stale;
}

auto
pyre::flow::Product::readers() const -> const connections_type &
{
    // easy enough
    return _readers;
}

auto
pyre::flow::Product::writers() const -> const connections_type &
{
    // easy enough
    return _writers;
}

// mutators
auto
pyre::flow::Product::clean() -> void
{
    // clear the flag
    _stale = false;
    // all done
    return;
}

auto
pyre::flow::Product::dirty() -> void
{
    // clear the flag
    _stale = true;
    // all done
    return;
}

// end of file