// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once

// factory
auto
pyre::flow::protocol::Factory::create(const name_type & name) -> factory_ref_type
{
    // build an instance and wrap it in a shared pointer
    auto ref = std::make_shared<Factory>(sentinel_type(), name);
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.flow.factories.create");
    // show me
    channel
        // the factory
        << "factory '" << ref->name() << "' at " << ref.get() << " : create "
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);
    // hand off the ref
    return ref;
}

// constructors
pyre::flow::protocol::Factory::Factory(sentinel_type sentinel, const name_type & name) :
    // superclass
    Node(sentinel, name),
    // data members
    _inputs {},
    _outputs {}
{}

// accessors
auto
pyre::flow::protocol::Factory::input(const name_type & name) const -> product_ref_type
{
    // look up the name
    auto spot = _inputs.find(name);
    // if it's not there
    if (spot == _inputs.end()) {
        // there is no binding
        return product_ref_type(nullptr);
    }
    // otherwise, return the binding
    return spot->second;
}

auto
pyre::flow::protocol::Factory::output(const name_type & name) const -> product_ref_type
{
    // look up the name
    auto spot = _outputs.find(name);
    // if it's not there
    if (spot == _outputs.end()) {
        // there is no binding
        return product_ref_type(nullptr);
    }
    // otherwise, return the binding
    return spot->second;
}

auto
pyre::flow::protocol::Factory::inputs() const -> const connectors_type &
{
    // easy enough
    return _inputs;
}

auto
pyre::flow::protocol::Factory::outputs() const -> const connectors_type &
{
    // easy enough
    return _outputs;
}

// interface
// build a reference
auto
pyre::flow::protocol::Factory::ref() -> factory_ref_type
{
    // build an instance and wrap it in a shared pointer
    return std::dynamic_pointer_cast<Factory>(shared_from_this());
}

// end of file