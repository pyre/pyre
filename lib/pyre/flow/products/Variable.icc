// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once

// factory
template <typename valueT>
auto
pyre::flow::products::Variable<valueT>::create(const name_type & name, cell_type value) -> ref_type
{
    // build an instance and wrap it in a shared pointer
    return std::make_shared<Variable>(sentinel_type(), name, value);
}

// destructor
template <typename valueT>
pyre::flow::products::Variable<valueT>::~Variable()
{
    // make a channel
    auto channel = pyre::journal::debug_t("pyre.flow.products.variable");
    // let me know
    channel
        // mark
        << "variable " << this << ": destroy"
        << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return;
}

// constructor
template <typename valueT>
pyre::flow::products::Variable<valueT>::Variable(
    sentinel_type sentinel, const name_type & name, cell_type value) :
    // base class; start out clean and initialized
    pyre::flow::product_t(sentinel, name, false),
    // member
    _value { value }
{}

// my value as a slot
template <typename valueT>
auto
pyre::flow::products::Variable<valueT>::value() -> cell_type
{
    // get my value and return it
    return read();
}

template <typename valueT>
auto
pyre::flow::products::Variable<valueT>::value(cell_type value) -> ref_type
{
    // notify the downstream graph that my value has changed
    flush();
    // record the new value
    auto self = write(value);
    // mark me as clean
    clean();
    // all done
    return self;
}

// value access by factories
template <typename valueT>
auto
pyre::flow::products::Variable<valueT>::read() -> cell_type
{
    // refresh me
    make();
    // return my value
    return _value;
}

template <typename valueT>
auto
pyre::flow::products::Variable<valueT>::write(cell_type value) -> ref_type
{
    // record the new value
    _value = value;
    // build a self reference
    auto self = std::dynamic_pointer_cast<Variable>(ref());
    // and return it
    return self;
}

// end of file
