// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved


// code guard
#pragma once

// declarations
#include "Map.h"


// map over an existing data product
template <typename T, bool isConst>
pyre::memory::Map<T, isConst>::Map(uri_type uri, writable_type writable) :
    super_type(),
    _map { std::make_shared<FileMap>(uri, writable) }
{}


// create a new one
template <typename T, bool isConst>
pyre::memory::Map<T, isConst>::Map(uri_type uri, size_type cells) :
    super_type(),
    // scale up the number of cells to the number of bytes
    _map { std::make_shared<FileMap>(uri, cell_type::bytes(cells)) }
{}


// interface
// get the name of the supporting file
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::uri() const -> uri_type
{
    // convert using my size in bytes
    return _map->uri();
}


// compute the number of cells in the memory block
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::cells() const -> cell_count_type
{
    // convert using my size in bytes
    return bytes() / sizeof(value_type);
}


// compute the number of cells in the memory block
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::bytes() const -> size_type
{
    // convert using my size in bytes
    return _map->bytes();
}


// access to the raw data pointer
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::data() const -> pointer
{
    // cast my data pointer to a {pointer}
    return static_cast<pointer>(_map->data());
}


// access to the raw data pointer in a form suitable for including in diagnostics
// by bypassing any interpretation of my {pointer} type by the stream injection logic
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::where() const -> const void *
{
    // cast my data pointer to a {pointer}
    return static_cast<const void *>(_map->data());
}


// access privileges
template <typename T, bool isConst>
constexpr auto
pyre::memory::Map<T, isConst>::readonly() -> bool
{
    // easy
    return isConst;
}


template <typename T, bool isConst>
constexpr auto
pyre::memory::Map<T, isConst>::writable() -> bool
{
    // easy
    return !readonly();
}


// human readable form of my expansion
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::name() -> string_type
{
    // resolve the name and return it
    return strategyName() + cellName();
}


// human readable form of my {cell_type}
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::cellName() -> string_type
{
    // resolve the name and return it
    return CellName<value_type>::name();
}


// my {cell_type} declaration string
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::cellDecl() -> string_type
{
    // resolve the name and return it
    return CellName<value_type>::decl();
}


// human readable form of my storage strategy
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::strategyName() -> string_type
{
    // build the name and return it
    return (isConst ? "Const" : "") + string_type("Map");
}


// iterator support
// iterator start
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::begin() const -> pointer
{
    // return the beginning of the block
    return data();
}


// iterator end
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::end() const -> pointer
{
    // return one past the end of the block
    return data() + cells();
}


// array-like access
template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::at(size_type pos) const -> reference
{
    // if the request is out of bounds
    if (pos >= cells()) {
        // make a channel
        pyre::journal::firewall_t channel("pyre.memory.bounds");
        // complain
        channel << "out of bounds access:" << pyre::journal::newline << "  index " << pos
                << " must be less than " << cells() << pyre::journal::newline
                << "  in pyre::memory::Map::operator[]" << pyre::journal::newline
                << "  with a map over " << _map->uri() << pyre::journal::endl(__HERE__);
        // unreachable, unless the user has marked this error as non-fatal
        // clamp {pos} to the last element in the block
        pos = cells() - 1;
    }
    // get the cell and return it
    return data()[pos];
}


template <typename T, bool isConst>
auto
pyre::memory::Map<T, isConst>::operator[](size_type pos) const -> reference
{
    // get the cell and return it
    return data()[pos];
}


// end of file
