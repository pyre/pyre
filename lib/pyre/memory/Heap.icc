// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved


// code guard
#pragma once

// declarations
#include "Heap.h"


// metamethods
// constructor
template <class T, bool isConst>
pyre::memory::Heap<T, isConst>::Heap(cell_count_type cells) :
    super_type(),
    _data { new value_type[cells] },
    _cells { cells }
{}


template <class T, bool isConst>
pyre::memory::Heap<T, isConst>::Heap(handle_type handle, cell_count_type cells) :
    super_type(),
    _data { handle },
    _cells { cells }
{}

// interface
// get the number of cells in the block
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::uri() const -> uri_type
{
    // make a buffer
    auto buffer = std::stringstream();
    // build the tag
    buffer << "heap:<own memory at " << where() << ">";
    // and return it
    return buffer.str();
}


// get the number of cells in the block
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::cells() const -> cell_count_type
{
    // easy
    return _cells;
}


// get the memory footprint of the block
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::bytes() const -> size_type
{
    // scale the number of cells by the cell size
    return cells() * sizeof(value_type);
}


// access to the data pointer
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::data() const -> pointer
{
    // return the raw data pointer
    return _data.get();
}


// access to the data pointer in a form suitable for including in diagnostics
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::where() const -> const void *
{
    // return the raw data pointer
    return _data.get();
}


// get the shared pointer
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::handle() const -> handle_type
{
    // easy
    return _data;
}


// access privileges
template <typename T, bool isConst>
constexpr auto
pyre::memory::Heap<T, isConst>::readonly() -> bool
{
    // easy
    return isConst;
}


template <typename T, bool isConst>
constexpr auto
pyre::memory::Heap<T, isConst>::writable() -> bool
{
    // easy
    return !readonly();
}


// simulate my c++ declaration
template <typename T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::declSelf() -> string_type
{
    // assemble and return
    return
        // namespace
        string_type("pyre::memory::") +
        // the type alias
        (isConst ? "const" : "") + "heap_t<" +
        // the template parameter
        cell_type::declValue() +
        // and done
        ">";
}


// simulate the c++ declaration of my value
template <typename T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::declValue() -> string_type
{
    // ask my cell
    return cell_type::declValue();
}


// human readable form of my type
template <typename T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::className() -> string_type
{
    // resolve the name and return it
    return string_type("Heap") + cell_type::className();
}


// iterator support
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::begin() const -> pointer
{
    // the beginning of the block
    return data();
}


template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::end() const -> pointer
{
    // one past the last cell in the block
    return data() + cells();
}


// data access
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::at(size_type pos) const -> reference
{
    // if the request is out of bounds
    if (pos >= cells()) {
        // make a channel
        pyre::journal::firewall_t channel("pyre.memory.bounds");
        // and complain
        channel << "out of bounds access:" << pyre::journal::newline << "  index " << pos
                << " must be less than " << cells() << pyre::journal::newline
                << "  in pyre::memory::heap_t::operator[]" << pyre::journal::newline
                << "  with a block on the heap at " << data() << pyre::journal::endl(__HERE__);
        // unreachable, unless the user has marked this error as non-fatal
        // clamp {pos} to the last element in the block
        pos = cells() - 1;
    }

    // return a reference to the cell at {pos}
    return _data[pos];
}


template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::operator[](size_type pos) const -> reference
{
    // return a reference to the cell at {pos}
    return _data[pos];
}


// interface
template <class T, bool isConst>
auto
pyre::memory::Heap<T, isConst>::fill(value_type value) const -> const self_type &
{
    // fill the buffer with {value}
    std::fill(this->begin(), this->end(), value);
    // return a reference to me
    return *this;
}


// end of file
