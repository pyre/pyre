// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved


// code guard
#if !defined(pyre_memory_Cell_icc)
#error this file contains implementation details for pyre::memory::Cell
#else


// access privileges
template <typename T, bool isConst>
constexpr auto
pyre::memory::Cell<T, isConst>::readonly() -> bool
{
    // easy
    return isConst;
}


template <typename T, bool isConst>
constexpr auto
pyre::memory::Cell<T, isConst>::writable() -> bool
{
    // easy
    return !readonly();
}


// compute the footprint of the given number of cells
template <typename T, bool isConst>
constexpr auto
pyre::memory::Cell<T, isConst>::bytes(cell_count_type n) -> size_type
{
    // easy
    return n * sizeof(T);
}

// human readable form of my {cell_type}
template <typename T, bool isConst>
auto
pyre::memory::Cell<T, isConst>::name() -> string_type
{
    // resolve the name and return it
    return CellName<value_type>::name();
}


// the datatype name specializations
template <>
struct pyre::memory::CellName<char> {
    // the name
    static auto name() -> string_t { return "Char"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::int8_t> {
    // the name
    static auto name() -> string_t { return "Int8"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::int16_t> {
    // the name
    static auto name() -> string_t { return "Int16"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::int32_t> {
    // the name
    static auto name() -> string_t { return "Int32"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::int64_t> {
    // the name
    static auto name() -> string_t { return "Int64"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::uint8_t> {
    // the name
    static auto name() -> string_t { return "UInt8"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::uint16_t> {
    // the name
    static auto name() -> string_t { return "UInt16"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::uint32_t> {
    // the name
    static auto name() -> string_t { return "UInt32"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::uint64_t> {
    // the name
    static auto name() -> string_t { return "UInt64"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::float32_t> {
    // the name
    static auto name() -> string_t { return "Float"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::float64_t> {
    // the name
    static auto name() -> string_t { return "Double"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::complex64_t> {
    // the name
    static auto name() -> string_t { return "ComplexFloat"; }
};

template <>
struct pyre::memory::CellName<pyre::memory::complex128_t> {
    // the name
    static auto name() -> string_t { return "ComplexDouble"; }
};

#endif

// end of file
