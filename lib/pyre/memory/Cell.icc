// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved


// code guard
#if !defined(pyre_memory_Cell_icc)
#error this file contains implementation details for pyre::memory::Cell
#else


// access privileges
template <typename T, bool isConst>
constexpr auto
pyre::memory::Cell<T, isConst>::readonly() -> bool
{
    // easy
    return isConst;
}


template <typename T, bool isConst>
constexpr auto
pyre::memory::Cell<T, isConst>::writable() -> bool
{
    // easy
    return !readonly();
}


// compute the footprint of the given number of cells
template <typename T, bool isConst>
constexpr auto
pyre::memory::Cell<T, isConst>::bytes(cell_count_type n) -> size_type
{
    // easy
    return n * sizeof(T);
}


#endif

// end of file
