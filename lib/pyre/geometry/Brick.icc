// -*- C++ -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2023 all rights reserved
//

// code guard
#if !defined(pyre_geometry_Brick_icc)
#error This header file contains implementation details of class pyre::geometry::Brick
#endif

// inlines
template <std::size_t dim, typename nodeT> template <typename... cornerT>
pyre::geometry::Brick<dim, nodeT>::
Brick(cornerT... corner) :
    _corners{corner...}
{}

template <std::size_t dim, typename nodeT>
constexpr auto
pyre::geometry::Brick<dim, nodeT>::
dimension() {
    // my node type knows this one
    return node_type::dimension();
}

template <std::size_t dim, typename nodeT>
constexpr auto
pyre::geometry::Brick<dim, nodeT>::
intrinsicDimension() {
    // i know this one
    return dim;
}

template <std::size_t dim, typename nodeT>
constexpr auto
pyre::geometry::Brick<dim, nodeT>::
size() {
    // ask my point container
    return 1 << dimension();
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::Brick<dim, nodeT>::
interior(const node_type & p) const {
    // i return a tuple of integers indicating the relative position of {p}
    std::array<int, dim> flag {};
    // rough check: get my bounding box
    auto bbox = box();
    // and unpack it
    auto & low = bbox.first;
    auto & high = bbox.second;

    // go through each axis
    for (size_t axis=0; axis < dimension(); ++axis) {
        // if the point coordinate is less than my bounding box
        if (p[axis] < low[axis]) {
            // mark as such
            flag[axis] = -1;
            // and move on
            continue;
        }
        // if the point coordinate is greater than my bounding box
        if (p[axis] > high[axis]) {
            // mark as such
            flag[axis] = 1;
            // and move on
            continue;
        }
        // otherwise, the point is within my bounding box
        // i now should perform a more complicated geometrical check, but for now...
        flag[axis] = 0;
    }

    // done
    return flag;
}

template <std::size_t dim, typename nodeT>
double
pyre::geometry::Brick<dim, nodeT>::
eigenlen() const {
    // what?
    return 0;
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::Brick<dim, nodeT>::
box() const {
    // make a trivial one
    box_type box { _corners[0].data(), _corners[0].data() };
    // enlarge it to fit me
    fit(box);
    // and return it
    return box;
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::Brick<dim, nodeT>::
fit(box_type & box) const {
    // unpack
    auto & low = box.first;
    auto & high = box.second;
    // go through my nodes
    for (auto & p : *this) {
        // and all axes
        for (size_t axis=0; axis < p.dimension(); ++axis) {
            // compare with {low}
            if (p[axis] < low[axis]) {
                // and adjust if necessary
                low[axis] = p[axis];
            }
            // compare with {high}
            if (p[axis] > high[axis]) {
                // and adjust if necessary
                high[axis] = p[axis];
            }
        }
    }

    // all done
    return;
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::Brick<dim, nodeT>::
operator[](size_type index) const {
    // delegate
    return _corners[index];
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::Brick<dim, nodeT>::
begin() const {
    // delegate
    return _corners.cbegin();
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::Brick<dim, nodeT>::
end() const {
    // delegate
    return _corners.cend();
}

// global operators
template <std::size_t dim, typename nodeT>
auto
pyre::geometry::
operator==(const brick_t<dim, nodeT> & b1, const brick_t<dim, nodeT> & b2) {
    // delegate
    return std::equal(b1.begin(), b1.end(), b2.begin());
}

template <std::size_t dim, typename nodeT>
auto
pyre::geometry::
operator!=(const brick_t<dim, nodeT> & b1, const brick_t<dim, nodeT> & b2) {
    // delegate
    return !(b1 == b2);
}

template <std::size_t dim, typename nodeT>
auto &
pyre::geometry::
operator<<(std::ostream & stream, const pyre::geometry::Brick<dim, nodeT> & brick) {
    // initialize; do it in this scope scope so we can use the iterator after the loop
    auto b = brick.begin();
    // inject up to the last point
    for (; b != brick.end()-1; ++b) {
        stream << "(" << *b << "), ";
    }
    // and now the last one
    stream << "(" << *b << ")";
    // all done
    return stream;
}


// end of file
